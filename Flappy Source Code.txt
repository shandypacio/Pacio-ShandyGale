#include <windows.h>                                    // Header for windows interaction
#include <stdlib.h>                                     // Header for standard functions
#include <string.h>                                     // Header for string manipulation (windows.h also adds this)
#include <stdio.h>                                      // Header for reading and writing
#include <time.h>                                       // Header for time interaction

#define horiborder      32                              // Count of the border (horizontal)
#define vertiborder     16                              // Count of the border (vertical)
#define pipeCount       3
#define PressQ          0x51                            // Windows virtual key code for 'Q'
#define GREEN           "\e[32m"                        // ANSI code for green output
#define YELLOW          "\e[33m"                        // ANSI code for yellow output
#define BLUE            "\e[0;36m"                      // ANSI code for blue output

typedef struct
{
    int x;
    int y;
}PIX;

PIX bird;
PIX pipes[3];

void GameBoard();                                   // Function to draw the game board based on the object positions
void Pipes();                                       // Function to reset the pipes if the hit the end of the screen
void Collision();                                   // Function to test for collisions with the floor or the pipes
void loadingBar();                                  // Function to load the screen

void loadingBar()
{
    system("color 0D");

    // Initialize char for printing
    // loading bar
    char a = 177, b = 219;

    printf("\n\n\n\n");
    printf("\n\n\n\n\t\t\t\t\tLoading...\n\n");
    printf("\t\t\t\t\t");

    // Print initial loading bar
    for (int i = 0; i < 26; i++)
        printf("%c", a);

    // Set the cursor again starting
    // point of loading bar
    printf("\r");
    printf("\t\t\t\t\t");

    // Print loading bar progress
    for (int i = 0; i < 26; i++) {
        printf("%c", b);

        Sleep(50);
    }

    system ("cls");
    system ("color 0E");
    printf ("\n\t\t   _____ _                           ");
    printf ("\n\t\t  |  ___| | __ _ _ __  _ __  _   _    ");
    printf ("\n\t\t  | |_  | |/ _` | '_ \\| '_ \\| | | |     ");
    printf ("\n\t\t  |  _| | | (_| | |_) | |_) | |_| |     ");
    printf ("\n\t\t  |_|   |_|\\__,_| .__/| .__/ \\__, |    ");
    printf ("\n\t\t                |_|   |_|    |___/");
    getch();
}


void GameBoard()
{
    char buff[5000];                                // Variable to hold the buffer that will be drawn
    strcpy(buff, "\e[17A");                         // ANSI code to move the cursor up 17 lines

    for (int y = 0; y <= vertiborder; y++)                // Loop over each row
    {
        for (int x = 0; x <= horiborder; x++)            // Loop over each column
        {
            if                                      // If its a screen edge
            (
                y == 0     ||
                y == vertiborder ||
                x == 0     ||
                x == horiborder
            )
            {
                strcat(buff, BLUE "--");              // Add '[]' to the buffer in white
                continue;                           // Move to the next column
            }

            for (int i = 0; i < pipeCount; i++)     // Loop over each pipe
            {
                if                                  // If its the top or bottom pipe face
                (
                    pipes[i].x >= x -1 &&
                    pipes[i].x <= x +1 &&
                    (
                        pipes[i].y == y + 3 ||
                        pipes[i].y == y - 3
                    )
                )
                {
                    strcat(buff, GREEN "&&");       // Add '[]' to the buffer in green
                    goto bottom;                    // Skip the rest of the tests
                }
                else if                             // If its the right angle of the bottom pipe
                (
                    pipes[i].x == x -1 &&
                    pipes[i].y == y - 4
                )
                {
                    strcat(buff, GREEN "&/");
                    goto bottom;
                }
                else if                             // If its the center of the pipe
                (
                    pipes[i].x == x &&
                    (
                        pipes[i].y <= y -4 ||
                        pipes[i].y >= y +4
                    )
                )
                {
                    strcat(buff, GREEN "&&");
                    goto bottom;
                }
                else if                             // If its the left angle of the bottom pipe
                (
                    pipes[i].x == x +1 &&
                    pipes[i].y == y - 4
                )
                {
                    strcat(buff, GREEN "\\&");
                    goto bottom;
                }
                else if                             // If its the right angle of the top pipe
                (
                    pipes[i].x == x -1 &&
                    pipes[i].y == y + 4
                )
                {
                    strcat(buff, GREEN "&\\");
                    goto bottom;
                }
                else if                             // If its the left angle of the top pipe
                (
                    pipes[i].x == x +1 &&
                    pipes[i].y == y + 4
                )
                {
                    strcat(buff, GREEN "/&");
                    goto bottom;
                }
                else if                             // If its the left side of the pipe
                (
                    pipes[i].x == x +1 &&
                    (
                        pipes[i].y <= y -5 ||
                        pipes[i].y >= y +5
                    )
                )
                {
                    strcat(buff, GREEN " &");
                    goto bottom;
                }
                else if                             // If its the right side of the pipe
                (
                    pipes[i].x == x -1 &&
                    (
                        pipes[i].y <= y -5 ||
                        pipes[i].y >= y +5
                    )
                )
                {
                    strcat(buff, GREEN "& ");
                    goto bottom;
                }
            }

            // The next bit will simply draw the bird in yellow based on x,y offsets
            if
            (
                bird.y == y &&
                bird.x == x
            )
            {
                strcat(buff, YELLOW ")>");
            }
            else if
            (
                bird.y == y &&
                bird.x == x +1
            )
            {
                strcat(buff, YELLOW "(");
            }

            else                                    // If its non of the other parts
            {
                strcat(buff, BLUE "  ");
            }

            bottom:;                                // The point moved to with "goto bottom;"
        }

        strcat(buff, "\n");                         // Append a new line to the buffer
    }

    printf(buff);                                   // Write the buffer
}

void Pipes()
{
    for (int i = 0; i < pipeCount; i++)
    {
        if (pipes[i].x == -1)                       // If the pipe is of screen
        {
            // If i = 0 then set pipes[i].x = pipes[2].x +15 else set pipes[i].x = pipes[i -1].x + 15
            // We do this so the distance between the pipes is always 15
            (i == 0) ? (pipes[i].x = pipes[2].x +15) : (pipes[i].x = pipes[i - 1].x +15);
            pipes[i].y = (rand()%7) +5;             // Set the pipes y to a random number between 5 and 11
        }
    }
}

void Collision()
{
    int score = 0;

    if (bird.y == 15)                               // If the bird is on the floor
    {
         system ("color 0C");
         printf ("\t\t\t      Game Over");
         exit (100);
    }

    for (int i = 0; i < pipeCount; i++)
    {
        /*
            The next 2 ifs are collision detection.
            With the 2 simple diagrams bellow A is the bird and B is the pipe
            A1  A2
             +--+
             |  |
             +--+
            A3
            B1  B2
             +--+
             |  |
             +--+
            B3
        */

        if (
            (bird.x -2 < pipes[i].x +2) &&          // A1 < B2
            (bird.x > pipes[i].x -2) &&             // A2 > B1
            (
                (bird.y < pipes[i].y -2) ||         // A3 < B3
                (bird.y > pipes[i].y +1)            // A3 > B3
            )
           )
        {

            system ("color 0C");
            printf ("\t\t\t      Game over");
            printf ("\n");
            system ("pause");
            exit (100);
        }
    }
    }



int main()
{
    loadingBar();

    srand(time(NULL));                              // Sets the seed for the random number generator to the current UNIX time stamp
    system("title \"Flappy\"");

    bird.x = 10;                                    // Set the birds start position
    bird.y = 10;

    for (int i = 0; i < pipeCount; i++)
    {
        pipes[i].x = 25 + 15 * i;                   // Set the pipes x to be spaces 15 blocks appart
        pipes[i].y = (rand()%7) +5;                 // Set the pipes y to a random number between 5 and 11
    }

    int frame = 0;                                  // Variable to hold the passed frames

    printf("\n\t\t   Press UP to jump and Q to quit.\n");    // List the controls

    for (int i = 0; i <= vertiborder; i++)                // Makes space for the game
    {
        printf("\n");
    }

    GameBoard();

    system("pause>nul");                            // Pause untill the user chooses to play or quit the program

    while (1)
    {
        if (GetAsyncKeyState(VK_UP))                // If the user is pressing the up arrow
        {
            bird.y -= 2;                            // Move the bird up 2 pixels
        }

        if (GetAsyncKeyState(PressQ))               // If the user chooses to quit
        {
            break;
        }

        if (frame == 2)                             // If its the third frame
        {
            bird.y++;                               // Drop the bird by 1 pixel

            for (int i = 0; i < 3; i++)             // Move the pipes forwards
            {
                pipes[i].x--;
            }

            frame = 0;                              // Reset the frames
        }

        Collision();                                 // Test for collisions

        GameBoard();                                // Draw the game
        Pipes();                                    // Update the pipes

        frame++;
        Sleep(100);                                 // Wait 100 milliseconds (This may need to be tuned on faster and slower machines as -Os was enough to break it for me)
    }

    return 0;
}
